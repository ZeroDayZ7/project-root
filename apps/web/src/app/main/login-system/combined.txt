 
 
 
 
───────────── mock-data.ts ───────────── 
export interface MockUser {
  email: string;
  password: string;
  has2FA: boolean;
  twoFactorCode?: string;
}

const mockData: MockUser[] = [
  {
    email: 'user@example.com',
    password: 'Password123!',
    has2FA: true,
    twoFactorCode: '123456',
  },
  {
    email: 'test@example.com',
    password: 'Test456!',
    has2FA: false,
  },
];

export default mockData; 
───────────── types.ts ───────────── 
export type LoginStep =
  | 'initial'
  | 'email'
  | 'password'
  | 'twoFactor'
  | 'success';
 
───────────── useEmailStep.ts ───────────── 
'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import DOMPurify from 'dompurify';
import { useEffect } from 'react';
import { LoginStep } from './types';

const emailSchema = z.object({
  email: z
    .string()
    .email('Podaj prawidłowy adres e-mail')
    .min(1, 'E-mail jest wymagany'),
});

type EmailForm = z.infer<typeof emailSchema>;

interface EmailStepHookProps {
  email: string;
  setEmail: (email: string) => void;
  setIsValidEmail: (isValid: boolean) => void;
  setLoginStep: (step: LoginStep) => void;
}

interface EmailStepHookReturn {
  register: ReturnType<typeof useForm<EmailForm>>['register'];
  handleSubmit: ReturnType<typeof useForm<EmailForm>>['handleSubmit'];
  errors: ReturnType<typeof useForm<EmailForm>>['formState']['errors'];
  isSubmitting: boolean;
}

export function useEmailStep({
  email,
  setEmail,
  setIsValidEmail,
  setLoginStep,
}: EmailStepHookProps): EmailStepHookReturn {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    setFocus,
    setValue,
  } = useForm<EmailForm>({
    resolver: zodResolver(emailSchema),
    defaultValues: { email },
  });

  useEffect(() => {
    setValue('email', email);
  }, [email, setValue]);

  useEffect(() => {
    setFocus('email');
  }, [setFocus]);

  const onSubmit = async (data: EmailForm) => {
    const sanitizedEmail = DOMPurify.sanitize(data.email);
    setEmail(sanitizedEmail);
    setIsValidEmail(true);
    setLoginStep('password');
  };

  return {
    register,
    handleSubmit: handleSubmit(onSubmit),
    errors,
    isSubmitting,
  };
}
 
───────────── useInitialStep.ts ───────────── 
'use client';

import { LoginStep } from './types';

interface InitialStepHookProps {
  setLoginStep: (step: LoginStep) => void;
}

interface InitialStepHookReturn {
  handleStart: () => void;
}

export function useInitialStep({
  setLoginStep,
}: InitialStepHookProps): InitialStepHookReturn {
  const handleStart = () => {
    setLoginStep('email');
  };

  return { handleStart };
}
 
───────────── useLoginSystem.ts ───────────── 
'use client';

import { useState } from 'react';
import { LoginStep } from './types';
import { useCsrfToken } from '@services/useCsrfToken';

export interface LoginSystemState {
  loginStep: LoginStep;
  email: string;
  password: string;
  isValidEmail: boolean;
  csrfToken: string | null;
  isLoading: boolean;
  error: string | null;
  setLoginStep: (step: LoginStep) => void;
  setEmail: (email: string) => void;
  setPassword: (password: string) => void;
  setIsValidEmail: (isValid: boolean) => void;
}

export function useLoginSystem(): LoginSystemState {
  const [loginStep, setLoginStep] = useState<LoginStep>('initial');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isValidEmail, setIsValidEmail] = useState(false);
  const { csrfToken, isLoading, error } = useCsrfToken();

  return {
    loginStep,
    email,
    password,
    isValidEmail,
    csrfToken,
    isLoading,
    error,
    setLoginStep,
    setEmail,
    setPassword,
    setIsValidEmail,
  };
}
 
───────────── usePasswordStep.ts ───────────── 
'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import DOMPurify from 'dompurify';
import { useEffect } from 'react';
import { LoginStep } from './types';

const passwordSchema = z.object({
  password: z
    .string()
    .min(8, 'Hasło musi mieć co najmniej 8 znaków')
    .regex(/[A-Z]/, 'Hasło musi zawierać przynajmniej jedną wielką literę')
    .regex(/[0-9]/, 'Hasło musi zawierać przynajmniej jedną cyfrę'),
});

type PasswordForm = z.infer<typeof passwordSchema>;

interface PasswordStepHookProps {
  password: string;
  setPassword: (password: string) => void;
  setLoginStep: (step: LoginStep) => void;
  csrfToken: string | null;
}

interface PasswordStepHookReturn {
  register: ReturnType<typeof useForm<PasswordForm>>['register'];
  handleSubmit: ReturnType<typeof useForm<PasswordForm>>['handleSubmit'];
  errors: ReturnType<typeof useForm<PasswordForm>>['formState']['errors'];
  isSubmitting: boolean;
}

export function usePasswordStep({
  password,
  setPassword,
  setLoginStep,
  csrfToken,
}: PasswordStepHookProps): PasswordStepHookReturn {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    setFocus,
    setValue,
  } = useForm<PasswordForm>({
    resolver: zodResolver(passwordSchema),
    defaultValues: { password },
  });

  useEffect(() => {
    setValue('password', password);
  }, [password, setValue]);

  useEffect(() => {
    setFocus('password');
  }, [setFocus]);

  const onSubmit = async (data: PasswordForm) => {
    if (!csrfToken) {
      console.error('Brak tokenu CSRF');
      return;
    }
    const sanitizedPassword = DOMPurify.sanitize(data.password);
    setPassword(sanitizedPassword);
    // Tutaj można dodać logikę wysyłania do API z użyciem csrfToken
    setLoginStep('twoFactor');
  };

  return {
    register,
    handleSubmit: handleSubmit(onSubmit),
    errors,
    isSubmitting,
  };
}
 
───────────── useTwoFactorStep.ts ───────────── 
'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import DOMPurify from 'dompurify';
import { useEffect } from 'react';
import { LoginStep } from './types';

const twoFactorSchema = z.object({
  code: z
    .string()
    .min(6, 'Kod 2FA musi mieć dokładnie 6 znaków')
    .max(6, 'Kod 2FA musi mieć dokładnie 6 znaków'),
});

type TwoFactorForm = z.infer<typeof twoFactorSchema>;

interface TwoFactorStepHookProps {
  setLoginStep: (step: LoginStep) => void;
}

interface TwoFactorStepHookReturn {
  register: ReturnType<typeof useForm<TwoFactorForm>>['register'];
  handleSubmit: ReturnType<typeof useForm<TwoFactorForm>>['handleSubmit'];
  errors: ReturnType<typeof useForm<TwoFactorForm>>['formState']['errors'];
  isSubmitting: boolean;
}

export function useTwoFactorStep({
  setLoginStep,
}: TwoFactorStepHookProps): TwoFactorStepHookReturn {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    setFocus,
  } = useForm<TwoFactorForm>({
    resolver: zodResolver(twoFactorSchema),
    defaultValues: { code: '' },
  });

  useEffect(() => {
    setFocus('code');
  }, [setFocus]);

  const onSubmit = async (data: TwoFactorForm) => {
    const sanitizedCode = DOMPurify.sanitize(data.code);
    // Tutaj można dodać logikę wysyłania kodu 2FA do API
    setLoginStep('success');
  };

  return {
    register,
    handleSubmit: handleSubmit(onSubmit),
    errors,
    isSubmitting,
  };
}
 
───────────── EmailStep.tsx ───────────── 
'use client';

import { useEmailStep } from './useEmailStep';
import { LoginStep } from './types';

interface EmailStepProps {
  email: string;
  setEmail: (email: string) => void;
  setIsValidEmail: (isValid: boolean) => void;
  setLoginStep: (step: LoginStep) => void;
}

export default function EmailStep({
  email,
  setEmail,
  setIsValidEmail,
  setLoginStep,
}: EmailStepProps) {
  const { register, handleSubmit, errors, isSubmitting } = useEmailStep({
    email,
    setEmail,
    setIsValidEmail,
    setLoginStep,
  });

  return (
    <form onSubmit={handleSubmit} className="space-y-4" noValidate>
      <div className="flex flex-col">
        <label
          htmlFor="email"
          className="mb-2 block text-sm font-medium text-foreground"
          aria-describedby={errors.email ? 'email-error' : undefined}
        >
          Adres e-mail
        </label>
        <input
          id="email"
          type="email"
          {...register('email')}
          className="w-full rounded border border-foreground/50 p-3 font-mono text-foreground transition-colors focus:border-foreground focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:outline-none"
          placeholder="user@example.com"
          aria-invalid={errors.email ? 'true' : 'false'}
          disabled={isSubmitting}
        />
        {errors.email && (
          <p
            id="email-error"
            className="mt-1 text-xs text-red-500"
            role="alert"
          >
            {errors.email.message}
          </p>
        )}
      </div>
      <button
        type="submit"
        className="w-full rounded border border-foreground bg-foreground/20 p-3 font-bold text-foreground transition-colors hover:bg-foreground/30 focus-visible:bg-foreground/30 focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50"
        disabled={isSubmitting || !!errors.email}
        aria-busy={isSubmitting ? 'true' : 'false'}
      >
        {isSubmitting ? 'Weryfikowanie...' : 'Weryfikuj e-mail'}
      </button>
      <button
        type="button"
        onClick={() => setLoginStep('initial')}
        className="w-full text-sm text-foreground/70 transition-colors hover:text-foreground focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:outline-none"
        aria-label="Powrót do ekranu początkowego"
      >
        ← Powrót
      </button>
    </form>
  );
}
 
───────────── InitialStep.tsx ───────────── 
'use client';

import { LoginStep } from './types';

interface InitialStepProps {
  setLoginStep: (step: LoginStep) => void;
}

export default function InitialStep({ setLoginStep }: InitialStepProps) {
  return (
    <div className="space-y-4">
      <button
        onClick={() => setLoginStep('email')}
        className="w-full bg-foreground/20 hover:bg-foreground/30 focus-visible:bg-foreground/30 border border-foreground rounded p-3 text-foreground font-bold transition-colors relative overflow-hidden group focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:outline-none"
        aria-label="Inicjuj logowanie do systemu"
      >
        <span className="relative z-10">INICJUJ LOGOWANIE</span>
      </button>
      <button
        className="w-full bg-accent-foreground/20 hover:bg-accent-foreground/30 focus-visible:bg-accent-foreground/30 border border-accent-foreground rounded p-3 text-accent-foreground transition-colors focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:outline-none"
        aria-label="Rejestracja nowego użytkownika"
      >
        REJESTRACJA NOWEGO UŻYTKOWNIKA
      </button>
    </div>
  );
}
 
───────────── LoginSystem.tsx ───────────── 
'use client';

import { Suspense, lazy } from 'react';
import { motion } from 'framer-motion';
import SystemDescription from './SystemDescription';
import { useLoginSystem } from './useLoginSystem';
import { Loader } from '@/components/ui/Loader';

const InitialStep = lazy(() => import('./InitialStep'));
const EmailStep = lazy(() => import('./EmailStep'));
const PasswordStep = lazy(() => import('./PasswordStep'));
const TwoFactorStep = lazy(() => import('./TwoFactorStep'));
const SuccessStep = lazy(() => import('./SuccessStep'));

export default function LoginSystem() {
  const {
    loginStep,
    email,
    password,
    isValidEmail,
    csrfToken,
    isLoading,
    error,
    setLoginStep,
    setEmail,
    setPassword,
    setIsValidEmail,
  } = useLoginSystem();

  if (isLoading) {
    return (
      <div className="flex min-h-[300px] items-center justify-center">
        <Loader aria-label="Ładowanie systemu logowania" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex min-h-[300px] items-center justify-center">
        <p className="text-red-500" role="alert">
          {error}
        </p>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center justify-start">
      <SystemDescription />
      <motion.div
        className="w-full max-w-md rounded-lg border border-foreground/30 p-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
        role="region"
        aria-labelledby="login-system-title"
      >
        <div className="mb-6 text-center">
          <h3
            id="login-system-title"
            className="text-lg font-bold text-foreground"
          >
            Dostęp do systemu
          </h3>
          <p className="mt-2 text-xs text-foreground/70">
            Uwierzytelnianie wielopoziomowe aktywne
          </p>
        </div>
        <Suspense fallback={<Loader aria-label="Ładowanie kroku logowania" />}>
          {loginStep === 'initial' && (
            <InitialStep setLoginStep={setLoginStep} />
          )}
          {loginStep === 'email' && (
            <EmailStep
              email={email}
              setEmail={setEmail}
              setIsValidEmail={setIsValidEmail}
              setLoginStep={setLoginStep}
            />
          )}
          {loginStep === 'password' && (
            <PasswordStep
              email={email}
              password={password}
              setPassword={setPassword}
              setLoginStep={setLoginStep}
              csrfToken={csrfToken}
            />
          )}
          {loginStep === 'twoFactor' && (
            <TwoFactorStep email={email} setLoginStep={setLoginStep} />
          )}
          {loginStep === 'success' && <SuccessStep />}
        </Suspense>
      </motion.div>
    </div>
  );
}
 
───────────── PasswordStep.tsx ───────────── 
'use client';

import { usePasswordStep } from './usePasswordStep';
import { LoginStep } from './types';

interface PasswordStepProps {
  email: string;
  password: string;
  setPassword: (password: string) => void;
  setLoginStep: (step: LoginStep) => void;
  csrfToken: string | null;
}

export default function PasswordStep({
  email,
  password,
  setPassword,
  setLoginStep,
  csrfToken,
}: PasswordStepProps) {
  const { register, handleSubmit, errors, isSubmitting } = usePasswordStep({
    password,
    setPassword,
    setLoginStep,
    csrfToken,
  });

  return (
    <form onSubmit={handleSubmit} className="space-y-4" noValidate>
      <div className="flex flex-col">
        <label
          htmlFor="password"
          className="mb-2 block text-sm font-medium text-foreground"
          aria-describedby={errors.password ? 'password-error' : undefined}
        >
          Hasło
        </label>
        <input
          id="password"
          type="password"
          {...register('password')}
          className="w-full rounded border border-foreground/50 p-3 font-mono text-foreground transition-colors focus:border-foreground focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:outline-none"
          placeholder="Wpisz hasło"
          aria-invalid={errors.password ? 'true' : 'false'}
          disabled={isSubmitting}
        />
        {errors.password && (
          <p
            id="password-error"
            className="mt-1 text-xs text-red-500"
            role="alert"
          >
            {errors.password.message}
          </p>
        )}
      </div>
      <p className="text-sm text-foreground/70">E-mail: {email}</p>
      <button
        type="submit"
        className="w-full rounded border border-foreground bg-foreground/20 p-3 font-bold text-foreground transition-colors hover:bg-foreground/30 focus-visible:bg-foreground/30 focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50"
        disabled={isSubmitting || !!errors.password}
        aria-busy={isSubmitting ? 'true' : 'false'}
      >
        {isSubmitting ? 'Weryfikowanie...' : 'Weryfikuj hasło'}
      </button>
      <button
        type="button"
        onClick={() => setLoginStep('email')}
        className="w-full text-sm text-foreground/70 transition-colors hover:text-foreground focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:outline-none"
        aria-label="Powrót do kroku e-mail"
      >
        ← Powrót
      </button>
    </form>
  );
}
 
───────────── SuccessStep.tsx ───────────── 
'use client';

import { Loader } from '@/components/ui/Loader';
import { motion } from 'framer-motion';

export default function SuccessStep() {
  return (
    <motion.div
      className="text-center space-y-4"
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="text-foreground text-lg">✅ DOSTĘP AUTORYZOWANY</div>
      <div className="text-sm text-foreground/70">
        Przekierowanie do panelu głównego...
      </div>
      {/* <div className="text-accent-foreground"></div> */}
      <Loader message="ŁADOWANIE INTERFEJSU..." />
    </motion.div>
  );
}
 
───────────── SystemDescription.tsx ───────────── 
'use client';

export default function SystemDescription() {
  return (
    <div className="border border-foreground/30 rounded-lg p-6 mb-8 w-full max-w-md">
      <h2 className="text-xl font-bold text-accent-foreground mb-4 text-center">
        SYSTEM KASANDRA
      </h2>
      <div className="text-sm text-card-foreground space-y-2 text-center">
        <p>Strategiczne Centrum Bezpieczeństwa</p>
        <p className="text-xs text-foreground/70">
          Zaawansowany system monitorowania i analizy zagrożeń wykorzystujący
          sztuczną inteligencję do przewidywania i neutralizacji potencjalnych
          zagrożeń bezpieczeństwa narodowego.
        </p>
      </div>
    </div>
  );
}
 
───────────── TwoFactorStep.tsx ───────────── 
'use client';

import { useTwoFactorStep } from './useTwoFactorStep';
import { LoginStep } from './types';

interface TwoFactorStepProps {
  email: string;
  setLoginStep: (step: LoginStep) => void;
}

export default function TwoFactorStep({
  email,
  setLoginStep,
}: TwoFactorStepProps) {
  const { register, handleSubmit, errors, isSubmitting } = useTwoFactorStep({
    setLoginStep,
  });

  return (
    <form onSubmit={handleSubmit} className="space-y-4" noValidate>
      <div className="flex flex-col">
        <label
          htmlFor="code"
          className="mb-2 block text-sm font-medium text-foreground"
          aria-describedby={errors.code ? 'code-error' : undefined}
        >
          Kod 2FA
        </label>
        <input
          id="code"
          type="text"
          {...register('code')}
          className="w-full rounded border border-foreground/50 p-3 font-mono text-foreground transition-colors focus:border-foreground focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:outline-none"
          placeholder="Wpisz kod 2FA"
          aria-invalid={errors.code ? 'true' : 'false'}
          disabled={isSubmitting}
        />
        {errors.code && (
          <p id="code-error" className="mt-1 text-xs text-red-500" role="alert">
            {errors.code.message}
          </p>
        )}
      </div>
      <p className="text-sm text-foreground/70">E-mail: {email}</p>
      <button
        type="submit"
        className="w-full rounded border border-foreground bg-foreground/20 p-3 font-bold text-foreground transition-colors hover:bg-foreground/30 focus-visible:bg-foreground/30 focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50"
        disabled={isSubmitting || !!errors.code}
        aria-busy={isSubmitting ? 'true' : 'false'}
      >
        {isSubmitting ? 'Weryfikowanie...' : 'Weryfikuj kod'}
      </button>
      <button
        type="button"
        onClick={() => setLoginStep('password')}
        className="w-full text-sm text-foreground/70 transition-colors hover:text-foreground focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:outline-none"
        aria-label="Powrót do kroku hasła"
      >
        ← Powrót
      </button>
    </form>
  );
}
 
